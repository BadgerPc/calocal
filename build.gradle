apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'gwt'
apply plugin: 'war'
apply plugin: 'eclipse'
//apply plugin: 'jetty'
apply from: 'https://raw.github.com/akhikhl/gretty/master/pluginScripts/gretty.plugin'

sourceCompatibility = 1.8
targetCompatibility = 1.8
group = 'vajracode.calocal'
version = '1.0'

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6'
	}
}

sourceSets {
    main {
        java {
            exclude '**/test/*'         
        }
    }
    test {        
        resources {
        	output.resourcesDir = "build/classes/main"
            srcDir 'src/test/resources'
        }
    }
}

ext {
	gwtVersion = '2.7.0'
	pwtVersion = '1.2.0-SNAPSHOT'
	springVersion = '4.2.5.RELEASE'
	springSecurityVersion = '4.0.4.RELEASE'
	hiberVersion = '4.3.11.Final'
	springSocialVersion = '1.1.4.RELEASE'	
	jerseyVersion = '2.22.2'
	jacksonVersion = '2.5.4' // corresponds to jersey 2.22.2
	
	oAuthRedirectUrl = ""	
	pathToSymbolMaps = ""	
}

repositories {
	mavenLocal()
	mavenCentral()
	maven{ url 'https://oss.sonatype.org/content/repositories/snapshots/'}
	maven{ url 'http://fugru.com/archiva/repository/snapshots/'}
}

compileJava{    
    options.incremental = true
    options.encoding = 'UTF-8'
}

configurations {	
}

dependencies {	
	providedCompile 'log4j:log4j:1.2.17'

	providedCompile "javax.validation:validation-api:1.0.0.GA"

	providedCompile "com.google.gwt:gwt-servlet:$gwtVersion"
	providedCompile "com.google.gwt:gwt-user:$gwtVersion"
	providedCompile "com.google.gwt:gwt-dev:$gwtVersion" 
	
	providedCompile "fr.putnami.pwt:pwt:$pwtVersion"
	
	providedCompile "org.fusesource.restygwt:restygwt:2.0.3"
	
	providedCompile "com.googlecode.mvp4g:mvp4g:1.5.0"
	providedCompile "com.google.gwt.inject:gin:2.1.2"	
	
	providedCompile "com.github.gwtmaterialdesign:gwt-material:1.4.1"
	providedCompile "com.github.gwtmaterialdesign:gwt-material-themes:1.4"	
		
	providedCompile "org.glassfish.jersey.ext:jersey-spring3:$jerseyVersion"
	providedCompile "org.glassfish.jersey.media:jersey-media-json-jackson:$jerseyVersion"
	
	providedCompile "javax.ws.rs:jsr311-api:1.1.1"	
	
	providedCompile "com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion"
	providedCompile "com.fasterxml.jackson.core:jackson-core:$jacksonVersion"	
	providedCompile "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"		
	
	providedCompile "org.springframework:spring-orm:$springVersion"
	providedCompile "org.springframework:spring-web:$springVersion"
	providedCompile "org.springframework:spring-context-support:$springVersion"
	
	providedCompile "org.springframework.security:spring-security-core:$springSecurityVersion"
	providedCompile "org.springframework.security:spring-security-config:$springSecurityVersion"
	providedCompile "org.springframework.security:spring-security-web:$springSecurityVersion"    
	
	providedCompile "org.hibernate:hibernate-entitymanager:$hiberVersion"
	providedCompile "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.0.Final"	
	
	providedCompile ("org.apache.commons:commons-lang3:3.4"){
	    transitive = false;
	}		
	providedCompile "org.apache.tomcat:tomcat-catalina:8.0.28"
	
	testCompile "junit:junit:4+"
	
	testCompile "org.glassfish.jersey.test-framework.providers:jersey-test-framework-provider-external:$jerseyVersion"
	testCompile "org.glassfish.jersey.connectors:jersey-apache-connector:$jerseyVersion"
	testCompile "org.springframework:spring-test:$springVersion"
	gretty "mysql:mysql-connector-java:5.1.38"
	//gretty "org.apache.httpcomponents:httpclient:4.5"
    //testCompile "javax.servlet:servlet-api:2.5"
}

gwt {
	gwtVersion = project.gwtVersion;
	maxHeapSize = "1G";
	
	modules = ['vajracode.calocal.Calocal']		

	sourceSets {
        main {
            java {
                srcDir 'src'
            }
        }
    }
     
    logLevel = 'TRACE' //INFO	

	superDev {
		noPrecompile=true
	}
	
	compiler {
        //enableClosureCompiler = true; //incopatible with compileReport  
        disableCastChecking = true; // activates -XdisableCastChecking 
        //compileReport = true;       
    }
}

if (gwt.eclipse.addGwtContainer) {
	eclipse.classpath.file{
		whenMerged{ classpath ->
			def projectRefs = classpath.entries.findAll{entry -> entry.kind =='con' && entry.path.equals('com.google.gwt.eclipse.core.GWT_CONTAINER')}
			classpath.entries.removeAll(projectRefs)
			classpath.entries.addAll(projectRefs)
		}
	}
}

eclipse {
	classpath {
		downloadSources=true
	}
}

/*test {
	systemProperties = [
		'jersey.test.host': 'localhost',
		'jersey.test.port': '8080'
	]
}*/


war.archiveName "ROOT.war"

task draftConfig() {			
	outputs.upToDateWhen { false }
}
task draftConfigLocal(dependsOn: draftConfig) {}
draftConfigLocal.doFirst {
	project.oAuthRedirectUrl = "http://localhost:8080/"
}
task releaseConfig() {
	outputs.upToDateWhen { false }
	project.oAuthRedirectUrl = "https://derzhika.ru/"
}
releaseConfig.doLast {
	cleanReleaseConfig
	cleanProcessResources
}

processResources.outputs.upToDateWhen { false }
war.outputs.upToDateWhen { false }

task lDeployGwt(type: GradleBuild) {		
	tasks = ['enableDraftCompileGwt', 'draftConfigLocal', 'copyToLocalAs']
} 
task ldg(dependsOn: lDeployGwt){}
task lDeployNoGwt(type: GradleBuild) {		
	tasks = ['disableDraftCompileGwt', 'draftConfigLocal', 'copyToLocalAs']
} 
task ldng(dependsOn: lDeployNoGwt){}

task rDeployGwt(type: GradleBuild){
	tasks = ['cleanProcessResources', 'enableCompileGwt', 'releaseConfig', 'war']
}
task rdg(dependsOn: rDeployGwt){}

task rDeployNoGwt(type: GradleBuild){
	tasks = ['cleanProcessResources', 'disableCompileGwt', 'releaseConfig', 'war']
}
task rdng(dependsOn: rDeployNoGwt){}

task buildNoGwt (type: GradleBuild){
	tasks = ['disableCompileGwt', 'releaseConfig', 'build']
}
task bng(dependsOn: buildNoGwt){}

task disableDraftCompileGwt{}
disableDraftCompileGwt.doFirst {
	draftCompileGwt.enabled = false;
	println "draftCompileGwt DISABLED";
}

task enableDraftCompileGwt{}
enableDraftCompileGwt.doFirst {
	draftCompileGwt.enabled = true
	gwt.compiler.style = 'PRETTY'
}

task enableCompileGwt{}
enableCompileGwt.doFirst {
	compileGwt.enabled = true
	gwt.compiler.style = 'OBF'
}

task disableCompileGwt{}
disableCompileGwt.doFirst {
	compileGwt.enabled = false
}

task copyToLocalAs(type: Copy) {		
	from draftWar
	into 'd:\\tomcat\\webapps_vajracode\\'
	rename { String fileName ->
	    'ROOT.war'
	}        
}

task syncSuperDevLibs(type: Sync) {
    from configurations.compile
    into "d:\\git\\toptal\\calocal\\super\\libs\\"
    /*exclude { details -> details.file.name.startsWith('gwt-dev') ||
                         details.file.name.startsWith('gwt-user') ||
                         details.file.name.startsWith('tomcat') ||
                         details.file.name.startsWith('asm') ||
                         details.file.name.startsWith('gwt-servlet')}*/
}

/*

httpPort = 8081
stopPort = 8082
stopKey = "stopKey"

test.doFirst {	
	[jettyRun, jettyRunWar]*.daemon = true
	tasks.jettyRun.execute()
}

test.doLast {
	tasks.jettyStop.execute()
}

[jettyRun, jettyRunWar]*.jettyEnvXml = file('src/test/resources/jetty-env.xml')

*/

compileTestJava.doFirst {
	classpath = classpath.filter{ File file ->
        !file.name.contains("jsr311") && !file.name.contains("gwt-")
    }	
}


test.doFirst {
	classpath = classpath.filter{ File file ->
        !file.name.contains("gwt-dev") &&
        !file.name.contains("restygwt")
    }
}

gretty { 
	httpPort = 8081
  	integrationTestTask = 'test'
  	servletContainer = 'jetty9'
  	serverConfigFile = "/src/test/resources/jetty-env.xml"
  	contextPath = ""
  	/*classPath = classPath.filter{ File file ->
        !file.name.contains("jsr311")
    }*/
    onStart {
        configurations.runtime?.with {
            exclude group: 'javax.ws.rs', module: 'jsr311-api'      
            exclude group: 'com.google.gwt', module: 'gwt-dev'
            exclude group: 'org.fusesource.restygwt', module: 'restygwt'
        }
    }
}

task copyTestResources(type: Copy) {
    from "${projectDir}/src/test/resources"
    into "${buildDir}/classes/test"
}
processTestResources.dependsOn copyTestResources



